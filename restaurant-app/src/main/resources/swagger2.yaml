swagger: '2.0'
info:
  title: Restaurant Service APIs
  description: APIs to register and manage restaurants
  version: '1.0'
  contact:
    name: Prasune John
    url: https://prasunejohn.blogspot.com
    email: test@email.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
host: "localhost:8082"
basePath: "/v2"
tags:
  - name: restaurant
    description: Everything about Restaurant
    externalDocs:
      description: "public doc urls if any"
      url: "http://<publicDocUrlIfAny>"
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /restaurants:
    get:
      description: Returns all restaurants from the system based on the filter criteria
      operationId: listRestaurants
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/restaurantNameParam'
        - $ref: '#/parameters/pageParam'
        - $ref: '#/parameters/limitParam'
      responses:
        200:
          description: Restaurant response
          schema:
            type: array
            items:
              $ref: '#/definitions/RestaurantSummary'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      description: Creates a new restaurant entry in the system
      operationId: createRestaurant
      produces:
        - application/json
      parameters:
        - name: CreateRestaurantDetails
          in: body
          description: Restaurant to add to the system
          required: true
          schema:
            $ref: '#/definitions/CreateRestaurantDetails'
      responses:
        200:
          description: Details of the Restaurant entry that got created
          schema:
            $ref: '#/definitions/Restaurant'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        412:
          $ref: '#/responses/PreConditionFailed'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/InternalServerError'
  /Restaurants/{restaurantId}:
    get:
      description: Returns details of the Restaurant
      operationId: GetRestaurant
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/restaurantIdPathParam'
      responses:
        200:
          description: Restaurant Details response
          schema:
            $ref: '#/definitions/Restaurant'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/InternalServerError'

    put:
      description: Updates details of the Restaurant
      operationId: UpdateRestaurant
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/restaurantIdPathParam'
        - name: UpdateRestaurantDetails
          in: body
          description: Details of the restaurant to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateRestaurantDetails'
      responses:
        200:
          description: Updated Restaurant Details response
          schema:
            $ref: '#/definitions/Restaurant'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/InternalServerError'

    delete:
      description: Delete restaurant entry from the system
      operationId: DeleteRestaurant
      parameters:
        - $ref: '#/parameters/restaurantIdPathParam'
      responses:
        204:
          description: Restaurant entry was deleted from the system
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        429:
          $ref: '#/responses/TooManyRequests'
        500:
          $ref: '#/responses/InternalServerError'

# Descriptions of common responses
responses:
  BadRequest:
    description: The server could not understand the request due to invalid syntax
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  Forbidden:
    description: Method not allowed
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: The requested resource was not found or not authorized
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: The requested resource already exists
    schema:
      $ref: '#/definitions/Error'
  PreConditionFailed:
    description: Precondition like e-tag matching failed
    schema:
      $ref: '#/definitions/Error'
  TooManyRequests:
    description: The user has sent too many requests in a given amount of time than allowed limit
    schema:
      $ref: '#/definitions/Error'
  InternalServerError:
    description: Server enountered internal error
    schema:
      $ref: '#/definitions/Error'

definitions:
  # Schema for error response body
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message

  # Schema for the business APIs
  CreateRestaurantDetails:
    type: object
    required:
      - name
      - cuisine
    properties:
      name:
        type: string
      cuisine:
        type: string

  Restaurant:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      cuisine:
        type: string
      timeRegistered:
        type: string
        format: date-time
      timeUpdated:
        type: string
        format: date-time

  RestaurantSummary:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      cuisine:
        type: string

  UpdateRestaurantDetails:
    type: object
    required:
      - cuisine
    properties:
      cuisine:
        type: string

parameters:
  pageParam:
    in: query
    name: page
    required: false
    type: integer
    minimum: 0
    description: page parameter to determine the set of paginated data o return.
  limitParam:
    in: query
    name: limit
    required: false
    type: integer
    minimum: 1
    maximum: 50
    default: 20
    description: The numbers of items to return.

  restaurantIdPathParam:
    name: restaurantId
    in: path
    description: ID of Restaurant to fetch
    required: true
    type: integer
    format: int64
  restaurantNameParam:
    name: name
    in: query
    description: for filtering the restaurant based on name
    required: false
    type: string
